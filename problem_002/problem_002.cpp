//
//
// Created by Or Groman on 12/27/19.
//
// Problem 2
// Each new term in the Fibonacci sequence is generated by adding the previous two terms.
// By starting with 1 and 2, the first 10 terms will be:
//
// 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...
//
// By considering the terms in the Fibonacci sequence whose values do not exceed four million,
// find the sum of the even-valued terms.
//

#include <iostream>
#include <chrono>
#include <stack>

typedef std::chrono::high_resolution_clock Clock;

int main()
{
    auto start_tick = Clock::now();

    const unsigned long long upper_limit = 4000000;
    unsigned long long a1 = 1;
    unsigned long long a2 = 2;
    unsigned long long curr = 3;

    unsigned long long sum = 2;

    while(curr <= upper_limit)
    {
        curr = a1 + a2;

        if(curr % 2 == 0)
        {
            sum = sum + curr;
            std::cout << "curr = " << curr << std::endl;
        }

        a1 = a2;
        a2 = curr;
    }

    auto end_tick = Clock::now();

    std::cout << "solution to problem 002: " << sum << std::endl;

    std::cout << "Delta t2-t1: "
              << std::chrono::duration_cast<std::chrono::nanoseconds>(end_tick - start_tick).count()
              << " nanoseconds" << std::endl;

    return 0;
}